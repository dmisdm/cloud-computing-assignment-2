
---
Name: Daniel Manning
Student ID: s3429288
Date: 2021-04-30
Repo: https://github.com/dmisdm/cloud-computing-assignment-2
Tagged Submission: https://github.com/dmisdm/cloud-computing-assignment-2/tree/submit
Deployed Site: http://ec2-13-211-130-110.ap-southeast-2.compute.amazonaws.com
---


# Task 1

        


```.babelrc
{
  "presets": [
    [
      "next/babel",
      {
        "class-properties": {
          "loose": true
        }
      }
    ]
  ],
  "plugins": [
    [
      "@babel/plugin-proposal-decorators",
      {
        "legacy": true
      }
    ]
  ]
}

```

        
        


```.dockerignore
node_modules/

web/.next


```

        
        


```.eslintrc.yml
parser: "@typescript-eslint/parser"
extends:
  - plugin:type-graphql/recommended
  - plugin:react-hooks/recommended
plugins:
  - "type-graphql"
parserOptions:
  project: "./tsconfig.json"
settings:
  react:
    version: detect
ignorePatterns:
  - "lib/graphqlClient.ts"

```

        
        


```.gitignore
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env.local
.env.development.local
.env.test.local
.env.production.local

# vercel
.vercel
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

```

        
        


```.yarnrc.yml
nodeLinker: node-modules

plugins:
  - path: .yarn/plugins/@yarnpkg/plugin-typescript.cjs
    spec: "@yarnpkg/plugin-typescript"

yarnPath: .yarn/releases/yarn-berry.cjs

```

        
        


```Dockerfile
FROM node:alpine

WORKDIR /app
COPY . .

WORKDIR /app/web
RUN yarn && yarn build

ENV PORT=80
EXPOSE 80
CMD ["yarn", "start"]



```

        
        


```README.md
This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `pages/index.js`. The page auto-updates as you edit the file.

[API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `pages/api/hello.js`.

The `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.

```

        
        


```a2.json
{"songs":[{"title":"1904","artist":"The Tallest Man on Earth","year":"2012","web_url":"http://www.songnotes.cc/songs/78-the-tallest-man-on-earth-1904","img_url":"http://www.songnotes.cc/images/artists/TheTallestManOnEarth.jpg"},{"title":"#40","artist":"Dave Matthews","year":"1999","web_url":"http://www.songnotes.cc/songs/119-dave-matthews-40","img_url":"http://www.songnotes.cc/images/artists/DaveMatthews.jpg"},{"title":"40oz to Freedom","artist":"Sublime","year":"1996","web_url":"http://www.songnotes.cc/songs/45-sublime-40oz-to-freedom","img_url":"http://www.songnotes.cc/images/artists/Sublime.jpg"},{"title":"#41","artist":"Dave Matthews","year":"1996","web_url":"http://www.songnotes.cc/songs/46-dave-matthews-band-41","img_url":"http://www.songnotes.cc/images/artists/DaveMatthews.jpg"},{"title":"American Girl","artist":"Tom Petty","year":"1977","web_url":"http://www.songnotes.cc/songs/86-tom-petty-american-girl","img_url":"http://www.songnotes.cc/images/artists/TomPetty.jpg"},{"title":"American Music","artist":"Violent Femmes","year":"1991","web_url":"http://www.songnotes.cc/songs/123-violent-femmes-american-music","img_url":"http://www.songnotes.cc/images/artists/ViolentFemmes.jpg"},{"title":"American Pie","artist":"Don McLean","year":"1972","web_url":"http://www.songnotes.cc/songs/132-don-mclean-american-pie","img_url":"http://www.songnotes.cc/images/artists/DonMcLean.jpg"},{"title":"And it Stoned Me","artist":"Van Morrison","year":"1970","web_url":"http://www.songnotes.cc/songs/27-van-morrison-and-it-stoned-me","img_url":"http://www.songnotes.cc/images/artists/VanMorrison.jpg"},{"title":"A Sailor's Christmas","artist":"Jimmy Buffett","year":"1996","web_url":"http://www.songnotes.cc/songs/11-jimmy-buffett-a-sailors-christmas","img_url":"http://www.songnotes.cc/images/artists/JimmyBuffett.jpg"},{"title":"Badfish","artist":"Sublime","year":"1996","web_url":"http://www.songnotes.cc/songs/21-sublime-badfish","img_url":"http://www.songnotes.cc/images/artists/Sublime.jpg"},{"title":"Banana Pancakes","artist":"Jack Johnson","year":"2005","web_url":"http://www.songnotes.cc/songs/102-jack-johnson-banana-pancakes","img_url":"http://www.songnotes.cc/images/artists/JackJohnson.jpg"},{"title":"Barefoot Children","artist":"Jimmy Buffett","year":"1995","web_url":"http://www.songnotes.cc/songs/9-jimmy-buffett-barefoot-children","img_url":"http://www.songnotes.cc/images/artists/JimmyBuffett.jpg"},{"title":"Big Parade","artist":"The Lumineers","year":"2012","web_url":"http://www.songnotes.cc/songs/63-the-lumineers-big-parade","img_url":"http://www.songnotes.cc/images/artists/TheLumineers.jpg"},{"title":"Brown Eyed Girl","artist":"Van Morrison","year":"1967","web_url":"http://www.songnotes.cc/songs/69-van-morrison-brown-eyed-girl","img_url":"http://www.songnotes.cc/images/artists/VanMorrison.jpg"},{"title":"Cape Canaveral","artist":"Conor Oberst","year":"2008","web_url":"http://www.songnotes.cc/songs/75-conor-oberst-cape-canaveral","img_url":"http://www.songnotes.cc/images/artists/ConorOberst.jpg"},{"title":"Carry On","artist":"fun.","year":"2012","web_url":"http://www.songnotes.cc/songs/122-fun-carry-on","img_url":"http://www.songnotes.cc/images/artists/Fun.jpg"},{"title":"Catch the Wind","artist":"Donovan","year":"1965","web_url":"http://www.songnotes.cc/songs/131-donovan-catch-the-wind","img_url":"http://www.songnotes.cc/images/artists/Donovan.jpg"},{"title":"Cat's in the Cradle","artist":"Harry Chapin","year":"1974","web_url":"http://www.songnotes.cc/songs/47-harry-chapin-cats-in-the-cradle","img_url":"http://www.songnotes.cc/images/artists/HarryChapin.jpg"},{"title":"Changes in Latitudes, Changes in Attitudes","artist":"Jimmy Buffett","year":"1977","web_url":"http://www.songnotes.cc/songs/38-jimmy-buffett-changes-in-latitudes-changes-in-attitudes","img_url":"http://www.songnotes.cc/images/artists/JimmyBuffett.jpg"},{"title":"Classy Girls","artist":"The Lumineers","year":"2012","web_url":"http://www.songnotes.cc/songs/55-the-lumineers-classy-girls","img_url":"http://www.songnotes.cc/images/artists/TheLumineers.jpg"},{"title":"Creep","artist":"Radiohead","year":"1993","web_url":"http://www.songnotes.cc/songs/36-radiohead-creep","img_url":"http://www.songnotes.cc/images/artists/Radiohead.jpg"},{"title":"Danny Boy","artist":"Johnny Cash","year":"2002","web_url":"http://www.songnotes.cc/songs/92-johnny-cash-danny-boy","img_url":"http://www.songnotes.cc/images/artists/JohnnyCash.jpg"},{"title":"Darkness Between the Fireflies","artist":"Mason Jennings","year":"1997","web_url":"http://www.songnotes.cc/songs/16-mason-jennings-darkness-between-the-fireflies","img_url":"http://www.songnotes.cc/images/artists/MasonJennings.jpg"},{"title":"Dead Sea","artist":"The Lumineers","year":"2012","web_url":"http://www.songnotes.cc/songs/98-the-lumineers-dead-sea","img_url":"http://www.songnotes.cc/images/artists/TheLumineers.jpg"},{"title":"Distantly in Love","artist":"Jimmy Buffett","year":"1983","web_url":"http://www.songnotes.cc/songs/35-jimmy-buffett-distantly-in-love","img_url":"http://www.songnotes.cc/images/artists/JimmyBuffett.jpg"},{"title":"Don't Leave Me (Ne Me Quitte Pas)","artist":"Regina Spektor","year":"2012","web_url":"http://www.songnotes.cc/songs/77-regina-spektor-dont-leave-me-no-me-quitte-pas","img_url":"http://www.songnotes.cc/images/artists/ReginaSpektor.jpg"},{"title":"Don't Look Back in Anger","artist":"Oasis","year":"1996","web_url":"http://www.songnotes.cc/songs/100-oasis-dont-look-back-in-anger","img_url":"http://www.songnotes.cc/images/artists/Oasis.jpg"},{"title":"Don't Stop Believin'","artist":"Journey","year":"1981","web_url":"http://www.songnotes.cc/songs/60-journey-dont-stop-believing","img_url":"http://www.songnotes.cc/images/artists/Journey.jpg"},{"title":"Doomsday","artist":"Elvis Perkins","year":"2009","web_url":"http://www.songnotes.cc/songs/120-elvis-perkins-doomsday","img_url":"http://www.songnotes.cc/images/artists/ElvisPerkins.jpg"},{"title":"Do You Remember","artist":"Jack Johnson","year":"2005","web_url":"http://www.songnotes.cc/songs/3-jack-johnson-do-you-remember","img_url":"http://www.songnotes.cc/images/artists/JackJohnson.jpg"},{"title":"Drink the Water","artist":"Jack Johnson","year":"2001","web_url":"http://www.songnotes.cc/songs/32-jack-johnson-drink-the-water","img_url":"http://www.songnotes.cc/images/artists/JackJohnson.jpg"},{"title":"Emmylou","artist":"First Aid Kit","year":"2012","web_url":"http://www.songnotes.cc/songs/74-first-aid-kit-emmylou","img_url":"http://www.songnotes.cc/images/artists/FirstAidKit.jpg"},{"title":"Fall Line","artist":"Jack Johnson","year":"2003","web_url":"http://www.songnotes.cc/songs/30-jack-johnson-fall-line","img_url":"http://www.songnotes.cc/images/artists/JackJohnson.jpg"},{"title":"Father and Son","artist":"Cat Stevens","year":"1970","web_url":"http://www.songnotes.cc/songs/28-cat-stevens-father-and-son","img_url":"http://www.songnotes.cc/images/artists/CatStevens.jpg"},{"title":"Flake","artist":"Jack Johnson","year":"2001","web_url":"http://www.songnotes.cc/songs/104-jack-johnson-flake","img_url":"http://www.songnotes.cc/images/artists/JackJohnson.jpg"},{"title":"Flapper Girl","artist":"The Lumineers","year":"2012","web_url":"http://www.songnotes.cc/songs/101-the-lumineers-flapper-girl","img_url":"http://www.songnotes.cc/images/artists/TheLumineers.jpg"},{"title":"Flowers in Your Hair","artist":"The Lumineers","year":"2012","web_url":"http://www.songnotes.cc/songs/96-the-lumineers-flowers-in-your-hair","img_url":"http://www.songnotes.cc/images/artists/TheLumineers.jpg"},{"title":"Folsom Prison Blues","artist":"Johnny Cash","year":"1957","web_url":"http://www.songnotes.cc/songs/108-johnny-cash-folsom-prison-blues","img_url":"http://www.songnotes.cc/images/artists/JohnnyCash.jpg"},{"title":"Free Fallin'","artist":"Tom Petty","year":"1989","web_url":"http://www.songnotes.cc/songs/84-tom-petty-free-fallin","img_url":"http://www.songnotes.cc/images/artists/TomPetty.jpg"},{"title":"Furr","artist":"Blitzen Trapper","year":"2008","web_url":"http://www.songnotes.cc/songs/10-blitzen-trapper-furr","img_url":"http://www.songnotes.cc/images/artists/BlitzenTrapper.jpg"},{"title":"Get Well Cards","artist":"Conor Oberst","year":"2008","web_url":"http://www.songnotes.cc/songs/54-conor-oberst-get-well-cards","img_url":"http://www.songnotes.cc/images/artists/ConorOberst.jpg"},{"title":"Gulf Coast Highway","artist":"Emmylou Harris","year":"2000","web_url":"http://www.songnotes.cc/songs/50-emmylou-harris-gulf-coast-highway","img_url":"http://www.songnotes.cc/images/artists/EmmylouHarris.jpg"},{"title":"Half Light I","artist":"Arcade Fire","year":"2010","web_url":"http://www.songnotes.cc/songs/29-arcade-fire-half-light-i","img_url":"http://www.songnotes.cc/images/artists/ArcadeFire.jpg"},{"title":"Half Light II (No Celebration)","artist":"Arcade Fire","year":"2010","web_url":"http://www.songnotes.cc/songs/12-arcade-fire-half-light-ii-no-celebration","img_url":"http://www.songnotes.cc/images/artists/ArcadeFire.jpg"},{"title":"Harvest","artist":"Neil Young","year":"1972","web_url":"http://www.songnotes.cc/songs/71-neil-young-harvest","img_url":"http://www.songnotes.cc/images/artists/NeilYoung.jpg"},{"title":"Heart of Gold","artist":"Neil Young","year":"1972","web_url":"http://www.songnotes.cc/songs/72-neil-young-heart-of-gold","img_url":"http://www.songnotes.cc/images/artists/NeilYoung.jpg"},{"title":"Here I Go Again","artist":"Whitesnake","year":"1982","web_url":"http://www.songnotes.cc/songs/130-whitesnake-here-i-go-again","img_url":"http://www.songnotes.cc/images/artists/Whitesnake.jpg"},{"title":"Hey Jealousy","artist":"Gin Blossoms","year":"1992","web_url":"http://www.songnotes.cc/songs/41-gin-blossoms-hey-jealousy","img_url":"http://www.songnotes.cc/images/artists/GinBlossoms.jpg"},{"title":"Hey Soul Sister","artist":"Train","year":"2009","web_url":"http://www.songnotes.cc/songs/129-train-hey-soul-sister","img_url":"http://www.songnotes.cc/images/artists/Train.jpg"},{"title":"High and Dry","artist":"Radiohead","year":"1995","web_url":"http://www.songnotes.cc/songs/37-radiohead-high-and-dry","img_url":"http://www.songnotes.cc/images/artists/Radiohead.jpg"},{"title":"Ho Hey","artist":"The Lumineers","year":"2012","web_url":"http://www.songnotes.cc/songs/34-the-lumineers-ho-hey","img_url":"http://www.songnotes.cc/images/artists/TheLumineers.jpg"},{"title":"Hollywood Forever Cemetery Sings","artist":"Father John Misty","year":"2012","web_url":"http://www.songnotes.cc/songs/114-father-john-misty-hollywood-forever-cemetery-sings","img_url":"http://www.songnotes.cc/images/artists/FatherJohnMisty.jpg"},{"title":"Home","artist":"Edward Sharpe & The Magnetic Zeros","year":"2009","web_url":"http://www.songnotes.cc/songs/93-edward-sharpe-magnetic-zeros-home","img_url":"http://www.songnotes.cc/images/artists/EdwardSharpeAndTheMagneticZeroes.jpg"},{"title":"Honey Do","artist":"Jimmy Buffett","year":"1983","web_url":"http://www.songnotes.cc/songs/97-jimmy-buffett-honey-do","img_url":"http://www.songnotes.cc/images/artists/JimmyBuffett.jpg"},{"title":"Hospitals and Jails","artist":"Mason Jennings","year":"2002","web_url":"http://www.songnotes.cc/songs/113-mason-jennings-hospitals-and-jails","img_url":"http://www.songnotes.cc/images/artists/MasonJennings.jpg"},{"title":"Hotel California","artist":"The Eagles","year":"1977","web_url":"http://www.songnotes.cc/songs/56-the-eagles-hotel-california","img_url":"http://www.songnotes.cc/images/artists/TheEagles.jpg"},{"title":"Hotel Yorba","artist":"The White Stripes","year":"2001","web_url":"http://www.songnotes.cc/songs/57-the-white-stripes-hotel-yorba","img_url":"http://www.songnotes.cc/images/artists/TheWhiteStripes.jpg"},{"title":"I Feel Home","artist":"OAR","year":"1999","web_url":"http://www.songnotes.cc/songs/42-oar-i-feel-home","img_url":"http://www.songnotes.cc/images/artists/OAR.jpg"},{"title":"I Knew You Were Trouble","artist":"Taylor Swift","year":"2012","web_url":"http://www.songnotes.cc/songs/85-taylor-swift-i-knew-you-were-trouble","img_url":"http://www.songnotes.cc/images/artists/TaylorSwift.jpg"},{"title":"I'm Writing a Novel","artist":"Father John Misty","year":"2012","web_url":"http://www.songnotes.cc/songs/111-father-john-misty-im-writing-a-novel","img_url":"http://www.songnotes.cc/images/artists/FatherJohnMisty.jpg"},{"title":"Island in the Sun","artist":"Weezer","year":"2001","web_url":"http://www.songnotes.cc/songs/43-weezer-island-in-the-sun","img_url":"http://www.songnotes.cc/images/artists/Weezer.jpg"},{"title":"I Won't Give Up","artist":"Jason Mraz","year":"2012","web_url":"http://www.songnotes.cc/songs/107-jason-mraz-i-wont-give-up","img_url":"http://www.songnotes.cc/images/artists/JasonMraz.jpg"},{"title":"Jack & Diane","artist":"John Mellencamp","year":"1982","web_url":"http://www.songnotes.cc/songs/99-john-mellencamp-jack-and-diane","img_url":"http://www.songnotes.cc/images/artists/JohnMellencamp.jpg"},{"title":"Karma Police","artist":"Radiohead","year":"1997","web_url":"http://www.songnotes.cc/songs/14-radiohead-karma-police","img_url":"http://www.songnotes.cc/images/artists/Radiohead.jpg"},{"title":"King of Spain","artist":"The Tallest Man on Earth","year":"2010","web_url":"http://www.songnotes.cc/songs/80-the-tallest-man-on-earth-king-of-spain","img_url":"http://www.songnotes.cc/images/artists/TheTallestManOnEarth.jpg"},{"title":"King of the World","artist":"First Aid Kit","year":"2012","web_url":"http://www.songnotes.cc/songs/76-first-aid-kit-king-of-the-world","img_url":"http://www.songnotes.cc/images/artists/FirstAidKit.jpg"},{"title":"Lean On Me","artist":"Bill Withers","year":"1972","web_url":"http://www.songnotes.cc/songs/83-bill-withers-lean-on-me","img_url":"http://www.songnotes.cc/images/artists/BillWithers.jpg"},{"title":"Little Talks","artist":"Of Monsters and Men","year":"2012","web_url":"http://www.songnotes.cc/songs/105-of-monsters-and-men-little-talks","img_url":"http://www.songnotes.cc/images/artists/OfMonstersAndMen.jpg"},{"title":"Live and Die","artist":"The Avett Brothers","year":"2012","web_url":"http://www.songnotes.cc/songs/115-the-avett-brothers-live-and-die","img_url":"http://www.songnotes.cc/images/artists/AvettBrothers.jpg"},{"title":"Lola","artist":"The Kinks","year":"1970","web_url":"http://www.songnotes.cc/songs/128-the-kinks-lola","img_url":"http://www.songnotes.cc/images/artists/Kinks.jpg"},{"title":"Lonesome Town","artist":"Ricky Nelson","year":"1958","web_url":"http://www.songnotes.cc/songs/126-ricky-nelson-lonesome-town","img_url":"http://www.songnotes.cc/images/artists/RickyNelson.jpg"},{"title":"Love in the Library","artist":"Jimmy Buffett","year":"1994","web_url":"http://www.songnotes.cc/songs/23-jimmy-buffett-love-in-the-library","img_url":"http://www.songnotes.cc/images/artists/JimmyBuffett.jpg"},{"title":"Love Story","artist":"Taylor Swift","year":"2008","web_url":"http://www.songnotes.cc/songs/61-taylor-swift-love-story","img_url":"http://www.songnotes.cc/images/artists/TaylorSwift.jpg"},{"title":"Margaritaville","artist":"Jimmy Buffett","year":"1977","web_url":"http://www.songnotes.cc/songs/62-jimmy-buffett-margaritaville","img_url":"http://www.songnotes.cc/images/artists/JimmyBuffett.jpg"},{"title":"Me and Julio Down by the Schoolyard","artist":"Paul Simon","year":"1972","web_url":"http://www.songnotes.cc/songs/31-paul-simon-me-and-julio-down-by-the-schoolyard","img_url":"http://www.songnotes.cc/images/artists/PaulSimon.jpg"},{"title":"Migration","artist":"Jimmy Buffett","year":"1974","web_url":"http://www.songnotes.cc/songs/66-jimmy-buffett-migration","img_url":"http://www.songnotes.cc/images/artists/JimmyBuffett.jpg"},{"title":"Moonshadow","artist":"Cat Stevens","year":"1971","web_url":"http://www.songnotes.cc/songs/73-cat-stevens-moonshadow","img_url":"http://www.songnotes.cc/images/artists/CatStevens.jpg"},{"title":"Mudfootball","artist":"Jack Johnson","year":"2001","web_url":"http://www.songnotes.cc/songs/59-jack-johnson-mudfootball","img_url":"http://www.songnotes.cc/images/artists/JackJohnson.jpg"},{"title":"My Antonia","artist":"Emmylou Harris","year":"2000","web_url":"http://www.songnotes.cc/songs/51-emmylou-harris-my-antonia","img_url":"http://www.songnotes.cc/images/artists/EmmylouHarris.jpg"},{"title":"New Realization","artist":"Sublime","year":"1996","web_url":"http://www.songnotes.cc/songs/39-sublime-new-realization","img_url":"http://www.songnotes.cc/images/artists/Sublime.jpg"},{"title":"No Surprises","artist":"Radiohead","year":"1997","web_url":"http://www.songnotes.cc/songs/52-radiohead-no-surprises","img_url":"http://www.songnotes.cc/images/artists/Radiohead.jpg"},{"title":"Nothing","artist":"Mason Jennings","year":"1997","web_url":"http://www.songnotes.cc/songs/15-mason-jennings-nothing","img_url":"http://www.songnotes.cc/images/artists/MasonJennings.jpg"},{"title":"Nothing Else Matters","artist":"Metallica","year":"1992","web_url":"http://www.songnotes.cc/songs/58-metallica-nothing-else-matters","img_url":"http://www.songnotes.cc/images/artists/Metallica.jpg"},{"title":"Only Son of the Ladiesman","artist":"Father John Misty","year":"2012","web_url":"http://www.songnotes.cc/songs/124-father-john-misty-only-son-of-the-ladiesman","img_url":"http://www.songnotes.cc/images/artists/FatherJohnMisty.jpg"},{"title":"Out on the Weekend","artist":"Neil Young","year":"1972","web_url":"http://www.songnotes.cc/songs/70-neil-young-out-on-the-weekend","img_url":"http://www.songnotes.cc/images/artists/NeilYoung.jpg"},{"title":"Party in the USA","artist":"Miley Cyrus","year":"2009","web_url":"http://www.songnotes.cc/songs/8-miley-cyrus-party-in-the-usa","img_url":"http://www.songnotes.cc/images/artists/MileyCyrus.jpg"},{"title":"Patience","artist":"Guns N' Roses","year":"1989","web_url":"http://www.songnotes.cc/songs/95-guns-n-roses-patience","img_url":"http://www.songnotes.cc/images/artists/GunsNRoses.jpg"},{"title":"Redemption Song","artist":"Bob Marley","year":"1980","web_url":"http://www.songnotes.cc/songs/67-bob-marley-redemption-song","img_url":"http://www.songnotes.cc/images/artists/BobMarley.jpg"},{"title":"Rivers of Babylon","artist":"Sublime","year":"1998","web_url":"http://www.songnotes.cc/songs/90-sublime-rivers-of-babylon","img_url":"http://www.songnotes.cc/images/artists/Sublime.jpg"},{"title":"Rocket Man","artist":"Elton John","year":"1972","web_url":"http://www.songnotes.cc/songs/135-elton-john-rocket-man","img_url":"http://www.songnotes.cc/images/artists/EltonJohn.jpg"},{"title":"Rodeo Clowns","artist":"Jack Johnson","year":"2003","web_url":"http://www.songnotes.cc/songs/68-jack-johnson-rodeo-clowns","img_url":"http://www.songnotes.cc/images/artists/JackJohnson.jpg"},{"title":"Send My Fond Regards to Lonelyville","artist":"Elvis Perkins","year":"2009","web_url":"http://www.songnotes.cc/songs/121-elvis-perkins-send-my-fond-regards-to-lonelyville","img_url":"http://www.songnotes.cc/images/artists/ElvisPerkins.jpg"},{"title":"Sentimental Heart","artist":"She & Him","year":"2008","web_url":"http://www.songnotes.cc/songs/109-she-and-him-volume-one","img_url":"http://www.songnotes.cc/images/artists/SheAndHim.jpg"},{"title":"Shelter from the Storm","artist":"Bob Dylan","year":"1975","web_url":"http://www.songnotes.cc/songs/110-bob-dylan-shelter-from-the-storm","img_url":"http://www.songnotes.cc/images/artists/BobDylan.jpg"},{"title":"Some Nights","artist":"fun.","year":"2012","web_url":"http://www.songnotes.cc/songs/103-fun-some-nights","img_url":"http://www.songnotes.cc/images/artists/Fun.jpg"},{"title":"Somewhere Only We Know","artist":"Keane","year":"2004","web_url":"http://www.songnotes.cc/songs/82-keane-somewhere-only-we-know","img_url":"http://www.songnotes.cc/images/artists/Keane.jpg"},{"title":"Space Oddity","artist":"David Bowie","year":"1969","web_url":"http://www.songnotes.cc/songs/136-david-bowie-space-oddity","img_url":"http://www.songnotes.cc/images/artists/DavidBowie.jpg"},{"title":"Stay or Leave","artist":"Dave Matthews","year":"2003","web_url":"http://www.songnotes.cc/songs/48-dave-matthews-stay-or-leave","img_url":"http://www.songnotes.cc/images/artists/DaveMatthews.jpg"},{"title":"Stubborn Love","artist":"The Lumineers","year":"2012","web_url":"http://www.songnotes.cc/songs/33-the-lumineers-stubborn-love","img_url":"http://www.songnotes.cc/images/artists/TheLumineers.jpg"},{"title":"Stuck in the Middle With You","artist":"Stealers Wheel","year":"1972","web_url":"http://www.songnotes.cc/songs/91-stealers-wheel-stuck-in-the-middle-with-you","img_url":"http://www.songnotes.cc/images/artists/StealersWheel.jpg"},{"title":"Submarines","artist":"The Lumineers","year":"2012","web_url":"http://www.songnotes.cc/songs/64-the-lumineers-submarines","img_url":"http://www.songnotes.cc/images/artists/TheLumineers.jpg"},{"title":"Sugar Mountain","artist":"Neil Young","year":"1977","web_url":"http://www.songnotes.cc/songs/106-neil-young-sugar-mountain","img_url":"http://www.songnotes.cc/images/artists/NeilYoung.jpg"},{"title":"Summer of '69","artist":"Bryan Adams","year":"1984","web_url":"http://www.songnotes.cc/songs/65-bryan-adams-summer-of-69","img_url":"http://www.songnotes.cc/images/artists/BryanAdams.jpg"},{"title":"Sweet Home Alabama","artist":"Lynyrd Skynyrd","year":"1974","web_url":"http://www.songnotes.cc/songs/133-lynyrd-skynyrd-sweet-home-alabama","img_url":"http://www.songnotes.cc/images/artists/LynyrdSkynyrd.jpg"},{"title":"Tangled Up in Blue","artist":"Bob Dylan","year":"1975","web_url":"http://www.songnotes.cc/songs/22-bob-dylan-tangled-up-in-blue","img_url":"http://www.songnotes.cc/images/artists/BobDylan.jpg"},{"title":"The Drugs Don't Work","artist":"Ben Harper","year":"2001","web_url":"http://www.songnotes.cc/songs/49-ben-harper-the-drugs-dont-work","img_url":"http://www.songnotes.cc/images/artists/BenHarper.jpg"},{"title":"The General","artist":"Dispatch","year":"2000","web_url":"http://www.songnotes.cc/songs/26-dispatch-the-general","img_url":"http://www.songnotes.cc/images/artists/Dispatch.jpg"},{"title":"The Lion's Roar","artist":"First Aid Kit","year":"2012","web_url":"http://www.songnotes.cc/songs/89-first-aid-kit-the-lions-roar","img_url":"http://www.songnotes.cc/images/artists/FirstAidKit.jpg"},{"title":"The Man in Me","artist":"Bob Dylan","year":"1970","web_url":"http://www.songnotes.cc/songs/24-bob-dylan-the-man-in-me","img_url":"http://www.songnotes.cc/images/artists/BobDylan.jpg"},{"title":"The Mother We Share","artist":"Chvrches","year":"2013","web_url":"http://www.songnotes.cc/songs/127-chvrches-the-mother-we-share","img_url":"http://www.songnotes.cc/images/artists/Chvrches.jpg"},{"title":"The Needle and the Damage Done","artist":"Neil Young","year":"1972","web_url":"http://www.songnotes.cc/songs/87-neil-young-the-needle-and-the-damage-done","img_url":"http://www.songnotes.cc/images/artists/NeilYoung.jpg"},{"title":"The Weather is Here, Wish You Were Beautiful","artist":"Jimmy Buffett","year":"1981","web_url":"http://www.songnotes.cc/songs/19-jimmy-buffett-the-weather-is-here-wish-you-were-beautiful","img_url":"http://www.songnotes.cc/images/artists/JimmyBuffett.jpg"},{"title":"The Weight","artist":"The Band","year":"1968","web_url":"http://www.songnotes.cc/songs/40-the-band-the-weight","img_url":"http://www.songnotes.cc/images/artists/TheBand.jpg"},{"title":"Tin Cup Chalice","artist":"Jimmy Buffett","year":"1974","web_url":"http://www.songnotes.cc/songs/25-jimmy-buffett-tin-cup-chalice","img_url":"http://www.songnotes.cc/images/artists/JimmyBuffett.jpg"},{"title":"Tiny Dancer","artist":"Elton John","year":"1971","web_url":"http://www.songnotes.cc/songs/13-elton-john-tiny-dancer","img_url":"http://www.songnotes.cc/images/artists/EltonJohn.jpg"},{"title":"Trying to Reason with Hurricane Season","artist":"Jimmy Buffett","year":"1974","web_url":"http://www.songnotes.cc/songs/18-jimmy-buffett-trying-to-reason-with-hurricane-season","img_url":"http://www.songnotes.cc/images/artists/JimmyBuffett.jpg"},{"title":"Under the Milky Way","artist":"The Church","year":"1988","web_url":"http://www.songnotes.cc/songs/17-the-church-under-the-milky-way","img_url":"http://www.songnotes.cc/images/artists/TheChurch.jpg"},{"title":"Viva La Vida","artist":"Coldplay","year":"2008","web_url":"http://www.songnotes.cc/songs/53-coldplay-viva-la-vida","img_url":"http://www.songnotes.cc/images/artists/Coldplay.jpg"},{"title":"Watching the Wheels","artist":"John Lennon","year":"1981","web_url":"http://www.songnotes.cc/songs/5-john-lennon-watching-the-wheels","img_url":"http://www.songnotes.cc/images/artists/JohnLennon.jpg"},{"title":"Way Over Yonder in the Minor Key","artist":"Billy Bragg & Wilco","year":"1998","web_url":"http://www.songnotes.cc/songs/112-billy-bragg-wilco-way-over-yonder-in-the-minor-key","img_url":"http://www.songnotes.cc/images/artists/BillyBraggWilco.jpg"},{"title":"We Are Never Ever Getting Back Together","artist":"Taylor Swift","year":"2012","web_url":"http://www.songnotes.cc/songs/88-taylor-swift-we-are-never-ever-getting-back-together","img_url":"http://www.songnotes.cc/images/artists/TaylorSwift.jpg"},{"title":"We're Going To Be Friends","artist":"The White Stripes","year":"2001","web_url":"http://www.songnotes.cc/songs/118-the-white-stripes-we-are-going-to-be-friends","img_url":"http://www.songnotes.cc/images/artists/TheWhiteStripes.jpg"},{"title":"What I Got","artist":"Sublime","year":"1996","web_url":"http://www.songnotes.cc/songs/20-sublime-what-i-got","img_url":"http://www.songnotes.cc/images/artists/Sublime.jpg"},{"title":"Wind and Walls","artist":"The Tallest Man on Earth","year":"2012","web_url":"http://www.songnotes.cc/songs/79-the-tallest-man-on-earth-wind-and-walls","img_url":"http://www.songnotes.cc/images/artists/TheTallestManOnEarth.jpg"},{"title":"With a Little Help From My Friends","artist":"The Beatles","year":"1967","web_url":"http://www.songnotes.cc/songs/81-the-beatles-with-a-little-help-from-my-friends","img_url":"http://www.songnotes.cc/images/artists/TheBeatles.jpg"},{"title":"Ya Hey","artist":"Vampire Weekend","year":"2013","web_url":"http://www.songnotes.cc/songs/125-vampire-weekend-ya-hey","img_url":"http://www.songnotes.cc/images/artists/VampireWeekend.jpg"},{"title":"You Belong With Me","artist":"Taylor Swift","year":"2008","web_url":"http://www.songnotes.cc/songs/44-taylor-swift-you-belong-with-me","img_url":"http://www.songnotes.cc/images/artists/TaylorSwift.jpg"},{"title":"You Love Me","artist":"DeVotchKa","year":"2004","web_url":"http://www.songnotes.cc/songs/134-devotchka-you-love-me","img_url":"http://www.songnotes.cc/images/artists/DeVotchKa.jpg"}]}
```

        
        


```deploy.sh
#!/bin/bash

rsync -rltvh --progress --exclude 'node_modules'  --exclude 'web/.next' . assignment2:~/app

ssh assignment2 "cd app && sudo docker-compose build && sudo docker-compose up -d"

```

        
        


```docker-compose.yml
version: "3.7"
services:
  #nginx-proxy:
  #  image: nginxproxy/nginx-proxy
  #  ports:
  #    - 80:80
  #    - 443:443
  #  volumes:
  #    - certs:/etc/nginx/certs \
  #    - vhost:/etc/nginx/vhost.d \
  #    - html:/usr/share/nginx/html \
  #    - /var/run/docker.sock:/tmp/docker.sock \
  #nginx-acme:
  #  image: nginxproxy/acme-companion
  #  volumes:
  #    - certs:/etc/nginx/certs \
  #    - vhost:/etc/nginx/vhost.d \
  #    - html:/usr/share/nginx/html \
  #    - /var/run/docker.sock:/tmp/docker.sock \
  server:
    restart: always
    build: .
    ports:
      - 80:80
#volumes:
#  certs:
#  vhost:
#  html:

```

        
        


```package.json
{
  "name": "cloud-computing-assignment-2",
  "version": "0.1.0",
  "private": true,
  "workspaces": {
    "packages": [
      "ops",
      "web"
    ]
  },
  "scripts": {
    "deploy": "yarn workspace ops deploy"
  },
  "devDependencies": {
    "@aws-sdk/client-dynamodb": "^3.13.1",
    "@aws-sdk/client-s3": "^3.13.1",
    "@types/uuid": "^8",
    "cross-fetch": "^3.1.4",
    "superstruct": "^0.15.1",
    "ts-node": "^9.1.1",
    "uuid": "^8.3.2"
  }
}

```

        
        


```seed.ts
#!/usr/bin/env yarn ts-node --project ./seed.tsconfig.json
import { object, string } from "superstruct";
import fetch from "cross-fetch";
import { DynamoDB } from "@aws-sdk/client-dynamodb";
import { S3 } from "@aws-sdk/client-s3";
import a2 from "./a2.json";
import { v4 } from "uuid";
const region = "ap-southeast-2";
const db = new DynamoDB({ region });
const s3 = new S3({ region });
const artistImagesBucket = "cloud-computing-assignment-2-artist-images";

const userId = "s3429288";
const passwordTemplate = "012345678901234567890";

const log = console.log;

const seedMusicTable = async () => {
  const songPutRequests = a2.songs.map((song) => ({
    PutRequest: {
      Item: {
        id: {
          S: v4(),
        },
        title: {
          S: song.title,
        },
        artist: {
          S: song.artist,
        },
        img_url: {
          S: song.img_url,
        },
        web_url: {
          S: song.web_url,
        },
        year: {
          S: song.year,
        },
      },
    },
  }));
  let cache: typeof songPutRequests[0][] = [];
  for (const song of songPutRequests) {
    if (cache.length >= 2) {
      log("Writing batch");
      await db.batchWriteItem({
        RequestItems: {
          music: cache,
        },
      });
      await new Promise((res) => setTimeout(res, 500));
      cache = [];
    }
    cache.push(song);
  }
  if (cache.length > 0) {
    await db.batchWriteItem({
      RequestItems: {
        music: cache,
      },
    });
    cache = [];
  }
};

const Song = object({
  id: string(),
  img_url: string(),
  artist: string(),
});
const syncS3ArtistImages = async () => {
  const buckets = await s3.listBuckets({});
  if (!buckets.Buckets?.find((bucket) => bucket.Name === artistImagesBucket))
    await s3.createBucket({ Bucket: artistImagesBucket });

  await s3.putBucketPolicy({
    Bucket: artistImagesBucket,
    Policy: JSON.stringify({
      Statement: {
        Sid: "AllowPublicRead",
        Effect: "Allow",
        Principal: {
          AWS: "*",
        },
        Action: "s3:GetObject",
        Resource: `arn:aws:s3:::${artistImagesBucket}/*`,
      },
    }),
  });

  const songs = await db.scan({
    TableName: "music",
    AttributesToGet: ["img_url", "id", "artist"],
  });
  if (!songs.Items) {
    throw Error(
      "No songs found in table so unable to upload any artist images"
    );
  }
  const uploadedArtistImages = new Set<string>();
  const existingImageKeys = new Set(
    (await s3.listObjects({ Bucket: artistImagesBucket }))?.Contents?.map(
      (obj) => obj.Key
    ) || ([] as string[])
  );
  for (const item of songs.Items) {
    const { img_url: url, id, artist } = Song.create({
      img_url: item.img_url.S,
      id: item.id.S,
      artist: item.artist.S,
    });
    const key = artist;
    if (existingImageKeys.has(key)) {
      log(`Skipping uploading ${key} as it already exists`);
      continue;
    }
    const imgUrlRequest = await fetch(url);
    if (!imgUrlRequest.ok || !imgUrlRequest.body) {
      console.error(await imgUrlRequest.text());
      throw Error("Bad request for image: " + url);
    }

    const buffer = new Uint8Array(await imgUrlRequest.arrayBuffer());
    if (!uploadedArtistImages.has(key)) {
      console.log("Uploading " + key);
      await s3.putObject({
        Bucket: artistImagesBucket,
        Key: key,
        Body: buffer,
      });
      uploadedArtistImages.add(key);
    }
  }
};

const seedLoginTable = async () => {
  await db.batchWriteItem({
    RequestItems: {
      login: initialUsers.map((user) => ({ PutRequest: { Item: user } })),
    },
  });
};

const initialUsers = Array.from(new Array(10), (_, i) => ({
  email: { S: `${userId}${i}@student.rmit.edu.au` },
  user_name: { S: `Firstname Lastname${i}` },
  password: { S: passwordTemplate.slice(i, i + 6) },
}));

const waitForTableCreation = (tableName: string) =>
  new Promise((res, rej) => {
    let resolved = false;
    log(`Waiting for table "${tableName}" to be created`);
    log("Will timeout after 10 seconds");
    const interval = setInterval(async () => {
      const tableDescription = await db.describeTable({ TableName: tableName });
      if (resolved) {
        return;
      }
      if (tableDescription.Table?.TableStatus?.toLowerCase() === "active") {
        resolved = true;
        clearInterval(interval);
        clearTimeout(timeout);
        log(`"${tableName}" table created!`);
        res(true);
      }
    }, 1000);
    const timeout = setTimeout(() => {
      if (resolved) return;
      clearInterval(interval);
      clearTimeout(timeout);
      rej("Timed out");
    }, 10000);
  });

const run = async () => {
  const tables = await db.listTables({});

  if (tables.TableNames?.indexOf("login") === -1) {
    log("Creating login table");
    await db.createTable({
      TableName: "login",
      KeySchema: [{ AttributeName: "email", KeyType: "HASH" }],
      AttributeDefinitions: [{ AttributeName: "email", AttributeType: "S" }],
      ProvisionedThroughput: {
        ReadCapacityUnits: 1,
        WriteCapacityUnits: 1,
      },
    });
    await waitForTableCreation("login");
    log("Seeding login table");
    await seedLoginTable();
  } else {
    log("Login table exists. Skipping seeding");
  }

  if (tables.TableNames?.indexOf("music") === -1) {
    log("Creating music table");
    await db.createTable({
      TableName: "music",
      KeySchema: [{ AttributeName: "id", KeyType: "HASH" }],
      ProvisionedThroughput: {
        ReadCapacityUnits: 1,
        WriteCapacityUnits: 1,
      },
      AttributeDefinitions: [{ AttributeName: "id", AttributeType: "S" }],
    });
    await waitForTableCreation("music");
    log("Seeding music table");
    await seedMusicTable();
    log("Syncing/uploading artist images to S3");
    await syncS3ArtistImages();
  } else {
    log("Music table exists. Skipping seeding.");
  }

  if (tables.TableNames?.indexOf("user_subscriptions") === -1) {
    log("Creating user_subscriptions table");
    await db.createTable({
      TableName: "user_subscriptions",
      KeySchema: [{ AttributeName: "emailSongId", KeyType: "HASH" }],
      ProvisionedThroughput: {
        ReadCapacityUnits: 1,
        WriteCapacityUnits: 1,
      },
      AttributeDefinitions: [
        { AttributeName: "emailSongId", AttributeType: "S" },
      ],
    });
    await waitForTableCreation("user_subscriptions");
  } else {
    log("Subscriptions exists. Skipping seeding.");
  }
};

run();

```

        
        


```seed.tsconfig.json
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "target": "es5",
    "module": "commonjs"
  }
}

```

        
        


```tsconfig.json
{
  "compilerOptions": {
    "target": "es2017",
    "module": "esnext",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": false,
    "skipLibCheck": true,
    "strict": true,
    "noImplicitAny": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "sourceMap": true
  },
  "include": [
    "web/next-env.d.ts",
    "web/**/*.ts",
    "web/**/*.tsx",
    "web/typings"
  ],
  "exclude": ["node_modules", "ops", "web/out", "web/.next"]
}

```

        
        


```web/README.md
# web

```

        
        


```web/next-env.d.ts
/// <reference types="next" />
/// <reference types="next/types/global" />

```

        
        


```web/next.config.js
module.exports = {
  future: {
    webpack5: true,
  },
  webpack: (config, options) => {
    config.experiments = { topLevelAwait: true };
    return config;
  },
};

```

        
        


```web/package.json
{
  "name": "web",
  "scripts": {
    "dev": "next dev",
    "build": "next build && next export",
    "start": "next start -p ${PORT}"
  },
  "devDependencies": {
    "@hookstate/core": "^3.0.7",
    "@material-ui/core": "^4.11.3",
    "@material-ui/icons": "^4.11.2",
    "@material-ui/styles": "^4.11.3",
    "@types/cookie": "^0",
    "@types/eslint": "^7",
    "@types/jsonwebtoken": "^8",
    "@types/node": "^14.14.41",
    "@types/react": "^17.0.3",
    "@typescript-eslint/eslint-plugin": "^4.22.0",
    "@typescript-eslint/parser": "^4.22.0",
    "eslint": "^7.25.0",
    "eslint-plugin-jsx-a11y": "^6.4.1",
    "eslint-plugin-react": "^7.23.2",
    "eslint-plugin-react-hooks": "^4.2.0",
    "eslint-plugin-type-graphql": "^0.3.0",
    "next": "10.1.3",
    "react": "17.0.2",
    "react-dom": "17.0.2",
    "typescript": "^4.2.4"
  },
  "dependencies": {
    "@babel/core": "^7.13.16",
    "@babel/helper-create-class-features-plugin": "^7.13.11",
    "@babel/plugin-proposal-decorators": "^7.13.15",
    "@emotion/core": "^11.0.0",
    "@emotion/react": "^11.1.5",
    "@emotion/styled": "^11.3.0",
    "@hookstate/persistence": "^3.0.0",
    "@typescript-eslint/types": "^4.22.0",
    "@xstyled/emotion": "^2.4.1",
    "@xstyled/util": "^2.2.3",
    "aws-sdk": "^2.894.0",
    "cookie": "^0.4.1",
    "date-fns": "^2.21.1",
    "http-status-codes": "^2.1.4",
    "isemail": "^3.2.0",
    "jsonwebtoken": "^8.5.1",
    "react-hook-form": "^7.3.4",
    "react-query": "^3.13.12",
    "reflect-metadata": "^0.1.13",
    "superstruct": "^0.15.1",
    "ts-node": "^9.1.1"
  }
}

```

        
        


```web/tsconfig.json
{
  "extends": "../tsconfig.json",
  "compilerOptions": {
    "baseUrl": "."
  }
}

```

        
        


```web/components/FormError.tsx
import { Typography } from "@material-ui/core";
import { APIError } from "lib/types";

export const FormError = ({
  error,
}: {
  error: typeof APIError.TYPE | string;
}) => {
  return (
    <Typography variant="caption" color="error">
      {typeof error === "string" ? error : error.errorMessage}
    </Typography>
  );
};

```

        
        


```web/components/FormTextField.tsx
import { TextField } from "@material-ui/core";
import {
  FieldPath,
  FieldValues,
  FormState,
  UseFormRegister,
  get,
} from "react-hook-form";

export function FormTextField<
  FormValues extends FieldValues,
  Name extends FieldPath<FormValues>
>({
  formState,
  name,
  register,
  required,
  label,
  ...props
}: React.ComponentPropsWithoutRef<typeof TextField> & {
  label: string;
  name: Name;
  formState: FormState<FormValues>;
  register: UseFormRegister<FormValues>;
  required?: boolean;
}) {
  const shouldShowError =
    !!formState.touchedFields[name] || formState.isSubmitted;
  return (
    <TextField
      {...props}
      label={label}
      error={shouldShowError && !!formState.errors[name]}
      helperText={shouldShowError && get(formState.errors, name)?.message}
      InputProps={register(name, {
        required: required ? `${label} is required` : undefined,
      })}
    />
  );
}

```

        
        


```web/components/NavBar.tsx
import { Box, Button, Typography } from "@material-ui/core";
import { useTheme } from "@material-ui/styles";
import { x } from "@xstyled/emotion";
import { meta } from "web/lib/meta";
import { useUser } from "web/lib/state/User";
import { Padding } from "./Padding";

export function NavBar() {
  const theme = useTheme();
  const { state: state, logout } = useUser(false);
  return (
    <x.header
      position="sticky"
      top={0}
      display="grid"
      px="2rem"
      py="1rem"
      gridTemplateColumns="minmax(10rem, 1fr)  auto"
      alignItems="center"
      borderBottom={`solid 1px ${theme.palette.grey[300]}`}
      w="100vw"
      overflow="hidden"
      bg={theme.palette.primary.dark}
      zIndex={theme.zIndex.appBar}
      color="white"
      h="6rem"
    >
      <Box clone flexShrink={0}>
        <Typography variant="h5">{meta.appName}</Typography>
      </Box>

      {state.value.user && (
        <x.div display="flex" flexDirection="column" alignItems="flex-end">
          <Typography variant="body2">
            Logged in as: {state.value.user.name}
          </Typography>
          <Padding size={0.5} />
          <Button color="inherit" variant="outlined" onClick={() => logout()}>
            Logout
          </Button>
        </x.div>
      )}
    </x.header>
  );
}

```

        
        


```web/components/Padding.tsx
import { x } from "@xstyled/emotion";

export const Padding = ({ size = 1 }: { size?: number }) => (
  <x.div w={`${size}rem`} h={`${size}rem`} />
);

```

        
        


```web/lib/auth.ts
import { authTokenPayload, AuthTokenPayload } from "./types";
import { sign, verify } from "jsonwebtoken";
import { add } from "date-fns";
const secret = "veryverysupersecret";
export const authCookieKey = "user_token";
export const encodePayload = (payload: Omit<AuthTokenPayload, "exp">) => {
  const expiresInHours = 1;
  const exp = add(new Date(), { hours: expiresInHours });
  return {
    payload: {
      ...payload,
      exp,
    },
    token: sign({ ...payload, exp: exp.valueOf() / 1000 }, secret),
    exp,
  };
};

export const verifyAndDecodeToken = (token: string) =>
  authTokenPayload.create(verify(token, secret));

```

        
        


```web/lib/cookies.ts
import { NextApiResponse } from "next";
import { CookieSerializeOptions, serialize } from "cookie";
export const setCookies = (
  res: NextApiResponse,
  cookies: { name: string; value: string; options?: CookieSerializeOptions }[]
) => {
  res.setHeader(
    "Set-Cookie",
    cookies.map((cookie) =>
      serialize(cookie.name, cookie.value, cookie.options)
    )
  );
};

```

        
        


```web/lib/meta.ts
export const meta = {
  appName: "Music",
};

```

        
        


```web/lib/theme.ts
import { createMuiTheme } from "@material-ui/core";

export const theme = createMuiTheme({
  props: {
    MuiContainer: {
      maxWidth: "md",
    },
  },
  typography: {
    fontFamily: "PT Mono, mono",
  },
});

```

        
        


```web/lib/types.ts
import { parseISO, fromUnixTime } from "date-fns";
import IsEmail from "isemail";
import {
  coerce,
  create,
  date,
  Infer,
  number,
  object,
  string,
  Struct,
  type,
  union,
  unknown,
  partial,
  refine,
  optional,
  array,
  defaulted,
  boolean,
} from "superstruct";
export const APIError = coerce(
  object({
    errorMessage: string(),
    errorName: string(),
    detail: optional(unknown()),
  }),
  string(),
  (value) => ({
    errorMessage: value,
    errorName: "Unknown",
  })
);

export type APIError = typeof APIError.TYPE;
export const createApiError = (error: typeof APIError.TYPE) =>
  APIError.create(error);

export const createStruct = <Type, Schema>(
  struct: Struct<Type, Schema>,
  data: Infer<typeof struct>
) => create(data, struct);

const coercedDate = coerce(date(), union([string(), number()]), (value) =>
  typeof value === "string" ? parseISO(value) : fromUnixTime(value)
);
export namespace Login {
  export const LoginRequest = object({
    email: string(),
    password: string(),
  });

  export const LoginSuccess = object({
    email: string(),
    name: string(),
    exp: coercedDate,
  });
}

export const email = refine(string(), "Email", (value) =>
  IsEmail.validate(value)
);
export namespace RegisterPage {
  export const RegistrationRequest = object({
    email: email,
    name: string(),
    password: string(),
  });

  export const RegistrationSucessResponse = object({
    email: string(),
    name: string(),
  });
}

export type User = {
  email: string;
  name: string;
};
export type GraphqlContext = {
  user?: User;
};

export const authTokenPayload = type({
  email: string(),
  name: string(),
  exp: coercedDate,
});

export type AuthTokenPayload = typeof authTokenPayload.TYPE;

export namespace Music {
  export const SongItem = object({
    id: string(),
    title: string(),
    artist: string(),
    year: string(),
    img_url: string(),
    web_url: string(),
  });
  export type SongItem = typeof SongItem.TYPE;
  export const SongSearchRequest = object({
    title: optional(string()),
    artist: optional(string()),
    year: optional(string()),
    limit: defaulted(number(), 200),
  });
  export type SongSearchRequest = typeof SongSearchRequest.TYPE;
}
export namespace Subscriptions {
  export const SubscriptionItem = object({
    emailSongId: string(),
    email: string(),
    songId: string(),
    subscribedAt: coercedDate,
  });

  export type SubscriptionItem = typeof SubscriptionItem.TYPE;
  export const Subscription = object({
    email: string(),
    song: Music.SongItem,
    subscribedAt: coercedDate,
  });
  export type Subscription = typeof Subscription.TYPE;
  export const SubscriptionsPageResponse = array(Subscription);
  export type SubscriptionsPageResponse = typeof SubscriptionsPageResponse.TYPE;
}

```

        
        


```web/lib/utils.ts
export const filterNotNull = <T>(i: T): i is NonNullable<typeof i> => !!i;

```

        
        


```web/pages/_app.tsx
import { CssBaseline, ThemeProvider } from "@material-ui/core";
import { Preflight, x } from "@xstyled/emotion";
import { queryClient } from "lib/state/queryClient";
import { theme } from "lib/theme";
import Head from "next/head";
import React from "react";
import { QueryClientProvider } from "react-query";
import { meta } from "web/lib/meta";

function MyApp<Props>({
  Component,
  pageProps,
}: {
  Component: React.ComponentType<Props>;
  pageProps: Props;
}) {
  React.useEffect(() => {
    // Remove the server-side injected CSS.
    const jssStyles = document.querySelector("#jss-server-side");
    if (jssStyles) {
      jssStyles.parentElement?.removeChild(jssStyles);
    }
  }, []);
  return (
    <>
      <Head>
        <title>{meta.appName}</title>
      </Head>
      <QueryClientProvider client={queryClient}>
        <ThemeProvider theme={theme}>
          <CssBaseline />
          <Preflight />

          <x.div h="100vh" w="100vw" overflowY="auto" overflowX="hidden">
            <Component {...pageProps} />
          </x.div>
        </ThemeProvider>
      </QueryClientProvider>
    </>
  );
}

export default MyApp;

```

        
        


```web/pages/_document.tsx
import React from "react";
import Document, { Html, Head, Main, NextScript } from "next/document";
import { ServerStyleSheets } from "@material-ui/core/styles";
import { theme } from "lib/theme";

export default class MyDocument extends Document {
  render() {
    return (
      <Html lang="en">
        <Head>
          {/* PWA primary color */}
          <meta name="theme-color" content={theme.palette.primary.main} />

          <link rel="preconnect" href="https://fonts.gstatic.com" />
          <link
            href="https://fonts.googleapis.com/css2?family=PT+Mono&display=swap"
            rel="stylesheet"
          />
        </Head>
        <body>
          <Main />
          <NextScript />
        </body>
      </Html>
    );
  }
}

MyDocument.getInitialProps = async (ctx) => {
  const sheets = new ServerStyleSheets();
  const originalRenderPage = ctx.renderPage;

  ctx.renderPage = () =>
    originalRenderPage({
      enhanceApp: (App) => (props) => sheets.collect(<App {...props} />),
    });

  const initialProps = await Document.getInitialProps(ctx);

  return {
    ...initialProps,
    styles: [
      ...React.Children.toArray(initialProps.styles),
      sheets.getStyleElement(),
    ],
  };
};

```

        
        


```web/pages/index.tsx
import {
  Box,
  Button,
  Card,
  CardMedia,
  Container,
  Typography,
  useTheme,
} from "@material-ui/core";
import { NavBar } from "components/NavBar";
import { useUser } from "lib/state/User";
import React from "react";
import {
  useSubscribeToSongMutation,
  useSubscriptionsQuery,
  useUnsubscribeToSongMutation,
} from "lib/state/Subscriptions";
import { x } from "@xstyled/emotion";
import { Padding } from "components/Padding";
import { Music, Subscriptions } from "lib/types";
import { useForm, useFormState, useWatch } from "react-hook-form";
import { FormTextField } from "components/FormTextField";
import { useSongSearchQuery } from "lib/state/Songs";
import { useState } from "@hookstate/core";

const SongTile = ({
  song,
  topElement,
}: {
  song: Music.SongItem;
  topElement?: React.ReactNode;
}) => {
  const theme = useTheme();
  return (
    <x.div
      key={song.id}
      w="12rem"
      flexShrink={0}
      display="flex"
      flexDirection="column"
      alignItems="center"
    >
      {topElement}
      <x.img
        boxShadow={theme.shadows[8]}
        borderRadius={theme.shape.borderRadius}
        src={song.img_url}
        objectFit="cover"
        h="7rem"
        w="7rem"
      />
      <Padding size={0.5} />
      <x.div textAlign="center">
        <Typography variant="caption" align="center">
          <strong>{song.title}</strong>
        </Typography>
        <br />
        <Typography variant="caption" align="center">
          {song.artist}
        </Typography>
        <br />
        <Typography variant="caption" align="center">
          {song.year}
        </Typography>
      </x.div>
    </x.div>
  );
};

const SubscriptionsList = (props: {
  subscriptions: Subscriptions.SubscriptionsPageResponse;
}) => (
  <>
    <Typography variant="h3">Subscriptions</Typography>
    {props.subscriptions.map((sub) => (
      <Card key={sub.email + sub.song.id}>
        <x.div padding="1rem" col gap="1rem">
          <Typography variant="h4">
            <a target="_blank" href={sub.song.web_url}>
              {sub.song.title}
            </a>
          </Typography>
          <Typography variant="h5">{sub.song.artist}</Typography>
          <Typography variant="h5">{sub.song.year}</Typography>
        </x.div>
        <CardMedia>
          <img src={sub.song.img_url} />
        </CardMedia>
      </Card>
    ))}
  </>
);

const SongSearch = (props: {}) => {
  const {
    register,
    formState,
    handleSubmit,
    getValues,
  } = useForm<Music.SongSearchRequest>();
  const { state: userState } = useUser();
  const [queryKey, setQueryKey] = React.useState(getValues());
  const { data, isLoading, error, refetch } = useSongSearchQuery(queryKey, {
    enabled: formState.isSubmitted,
  });
  const subscriptionsQuery = useSubscriptionsQuery();
  const subscribeToSongMutation = useSubscribeToSongMutation();

  return (
    <x.div h="30rem" display="flex" flexDirection="column">
      <Typography variant="h6" align="center">
        Song search
      </Typography>
      <x.form
        display="flex"
        gap="1rem"
        justifyContent="center"
        alignItems="flex-end"
        onSubmit={handleSubmit((values) => {
          setQueryKey(values);
        })}
      >
        <FormTextField
          register={register}
          formState={formState}
          name="title"
          label="Title"
          autoComplete=""
        />
        <FormTextField
          register={register}
          formState={formState}
          name="artist"
          label="Artist"
          autoComplete=""
        />
        <FormTextField
          register={register}
          formState={formState}
          name="year"
          label="Year"
          autoComplete=""
        />
        <Button type="submit">Search</Button>
      </x.form>
      <Padding size={2} />
      <x.div
        row
        gap="2rem"
        justifyContent="center"
        flexWrap="wrap"
        overflow="auto"
        flex={1}
      >
        {isLoading && "Searching..."}
        {error && error.errorMessage}

        {data &&
          (!data.length ? (
            <Typography>No result is retrieved. Please query again</Typography>
          ) : (
            data.map((song) => {
              const subscriptionExists = !!subscriptionsQuery.data?.find(
                (item) => item.song.id === song.id
              );
              return (
                <SongTile
                  key={song.id}
                  song={song}
                  topElement={
                    <Button
                      disabled={subscriptionExists}
                      onClick={() =>
                        subscribeToSongMutation.mutate({
                          songId: song.id,
                          email: userState.value.user?.email || "",
                        })
                      }
                    >
                      {subscriptionExists ? "Subscribed" : "Subscribe"}
                    </Button>
                  }
                />
              );
            })
          ))}
        <x.div w="100%" />
      </x.div>
    </x.div>
  );
};

const SubscriptionsArea = () => {
  const { data, isLoading, error } = useSubscriptionsQuery();
  const unsubscribe = useUnsubscribeToSongMutation();
  return (
    <>
      <Typography variant="h3">Subscriptions</Typography>
      <Padding />
      {error ? (
        <Typography>{error.errorMessage}</Typography>
      ) : isLoading ? (
        <Typography>Loading subscriptions...</Typography>
      ) : !data || !data.length ? (
        <Typography>No subscriptions found!</Typography>
      ) : (
        <x.div display="flex" gap="1rem" flexWrap="wrap">
          {data.map((item) => (
            <SongTile
              topElement={
                <Button
                  onClick={() => unsubscribe.mutate({ songId: item.song.id })}
                >
                  Remove
                </Button>
              }
              key={item.song.id}
              song={item.song}
            />
          ))}
        </x.div>
      )}
    </>
  );
};
export default function Home() {
  useUser();

  return (
    <>
      <NavBar />
      <Container>
        <Padding size={2} />
        <SongSearch />
        <Padding size={2} />
        <SubscriptionsArea />
        <Padding />
      </Container>
    </>
  );
}

```

        
        


```web/pages/login.tsx
import { Box, Button, Card, TextField, Typography } from "@material-ui/core";
import { useTheme } from "@material-ui/styles";
import { x } from "@xstyled/emotion";
import { FormTextField } from "web/components/FormTextField";
import { NavBar } from "web/components/NavBar";
import { useLoginMutation, useUser } from "web/lib/state/User";
import { useRouter } from "next/router";
import { useForm } from "react-hook-form";
import { Login } from "lib/types";
import { FormError } from "components/FormError";

export default function LoginPage() {
  const loginMutation = useLoginMutation();
  const { state: state } = useUser(false);
  const { register, handleSubmit, formState } = useForm<
    typeof Login.LoginRequest.TYPE
  >();

  const router = useRouter();
  return (
    <x.div w="100%" h="100%" display="flex" flexDirection="column">
      <NavBar />
      <x.main
        display="flex"
        flexDirection="column"
        flex={1}
        justifyContent="center"
        alignItems="center"
      >
        <form
          onSubmit={handleSubmit((form) =>
            loginMutation.mutate(form, {
              onSuccess: (data) => {
                state.user.set(data);
                router.push("/");
              },
            })
          )}
        >
          <Card
            style={{
              width: "20rem",
              padding: "1rem",
              display: "flex",
              flexDirection: "column",
              gap: "1rem",
            }}
          >
            <FormTextField
              label="Email"
              formState={formState}
              register={register}
              required
              name="email"
              autoComplete="email"
              type="email"
            />
            <FormTextField
              label="Password"
              formState={formState}
              register={register}
              required
              name="password"
              type="password"
              autoComplete="current-password"
            />
            <Button type="submit" variant="outlined" color="primary">
              Login
            </Button>
            {loginMutation.error && <FormError error={loginMutation.error} />}
          </Card>
          <Button onClick={() => router.push("/register")} fullWidth>
            Register
          </Button>
        </form>
      </x.main>
    </x.div>
  );
}

```

        
        


```web/pages/register.tsx
import { Button, Card, Typography } from "@material-ui/core";
import { x } from "@xstyled/emotion";
import { FormError } from "components/FormError";
import { useRegisterMutation, useUser } from "lib/state/User";
import { RegisterPage } from "lib/types";
import { useRouter } from "next/router";
import { useForm } from "react-hook-form";
import { FormTextField } from "web/components/FormTextField";
import { NavBar } from "web/components/NavBar";

export default function LoginPage() {
  const registerMutation = useRegisterMutation();
  const { register, handleSubmit, formState } = useForm<
    typeof RegisterPage.RegistrationRequest.TYPE
  >();

  const router = useRouter();
  return (
    <x.div w="100%" h="100%" display="flex" flexDirection="column">
      <NavBar />
      <x.main
        display="flex"
        flexDirection="column"
        flex={1}
        justifyContent="center"
        alignItems="center"
      >
        <form
          onSubmit={handleSubmit((form) =>
            registerMutation.mutate(form, {
              onSuccess: (data) => {
                // Could log the user in here?
                //state.user.set(data);
                router.push("/login");
              },
            })
          )}
        >
          <Card
            style={{
              width: "20rem",
              padding: "1rem",
              display: "flex",
              flexDirection: "column",
              gap: "1rem",
            }}
          >
            <FormTextField
              label="Email"
              formState={formState}
              register={register}
              required
              name="email"
              autoComplete="email"
              type="email"
            />
            <FormTextField
              label="Name"
              formState={formState}
              register={register}
              required
              name="name"
              autoComplete="name"
            />
            <FormTextField
              label="Password"
              formState={formState}
              register={register}
              required
              name="password"
              type="password"
              autoComplete="new-password"
            />
            <Button type="submit" variant="outlined" color="primary">
              Register
            </Button>
            {registerMutation.error && (
              <FormError error={registerMutation.error} />
            )}
          </Card>
        </form>
      </x.main>
    </x.div>
  );
}

```

        
        


```web/public/favicon.ico
'utf-8' codec can't decode byte 0xa8 in position 30: invalid start byte
```

        
        


```web/typings/DefaultTheme.d.ts
import { Theme } from "@material-ui/core";

declare module "@material-ui/styles/defaultTheme" {
  export interface DefaultTheme extends Theme {}
}

```

        
        


```web/lib/api/errors.ts
import { StatusCodes } from "http-status-codes";
import { NextApiResponse } from "next";
import { StructError } from "superstruct";
import { createApiError } from "web/lib/types";

export abstract class BaseApiError<Details = unknown> {
  abstract message: string;
  abstract statusCode: StatusCodes;
  constructor(public details?: Details) {}

  send(res: NextApiResponse) {
    res.status(this.statusCode);
    res.send(
      createApiError({
        errorMessage: this.message,
        detail: this.details,
        errorName: this.constructor.name,
      })
    );
  }
}
export class InvalidAuthToken extends BaseApiError<string> {
  message = "Invalid authentication token";
  statusCode = StatusCodes.BAD_REQUEST;
}

export class SerdeError extends BaseApiError<StructError> {
  message = "Invalid request payload";
  statusCode = StatusCodes.BAD_REQUEST;
  constructor(public details: StructError) {
    super(details);
  }
}

```

        
        


```web/lib/api/middlewares.ts
import { authCookieKey, verifyAndDecodeToken } from "lib/auth";
import { AuthTokenPayload } from "lib/types";
import { NextApiRequest, NextApiResponse, NextApiHandler } from "next";
import { StructError } from "superstruct";
import { BaseApiError, InvalidAuthToken, SerdeError } from "./errors";
export type AuthenticatedApiRequest = NextApiRequest & {
  user: AuthTokenPayload;
};
export const authenticated = (
  handler: (
    req: AuthenticatedApiRequest,
    res: NextApiResponse
  ) => void | Promise<void>
): NextApiHandler => async (req, res) => {
  let user: AuthTokenPayload;
  try {
    user = verifyAndDecodeToken(req.cookies[authCookieKey]);
  } catch (e) {
    new InvalidAuthToken(e).send(res);
    return;
  }
  try {
    await handler(Object.assign(req, { user }), res);
  } catch (e) {
    if (e instanceof BaseApiError) {
      e.send(res);
      return;
    } else if (e instanceof StructError) {
      new SerdeError(e).send(res);
    } else {
      throw e;
    }
  }
};

```

        
        


```web/lib/services/SongService.ts
import {
  ComparisonOperator,
  DynamoDB,
  ScanInput,
} from "@aws-sdk/client-dynamodb";
import { Music } from "lib/types";
import { dynamoDbItemToObject } from "./utils";

const TableName = "music";

export class SongService {
  constructor(
    private db: DynamoDB,
    private opts: { artistImagesBucketUrl: string }
  ) {}
  async getSongs(ids: string[]): Promise<Music.SongItem[]> {
    return (
      (
        await this.db.batchGetItem({
          RequestItems: {
            [TableName]: {
              Keys: ids.map((id) => ({ id: { S: id } })),
            },
          },
        })
      ).Responses?.[TableName]?.map((item) =>
        Music.SongItem.create(dynamoDbItemToObject(item))
      ) || []
    );
  }
  async getSong(id: string): Promise<Music.SongItem | undefined> {
    const result = await this.db.getItem({
      TableName,
      Key: {
        id: { S: id },
      },
    });

    if (!result.Item) {
      return undefined;
    } else {
      return Music.SongItem.create(dynamoDbItemToObject(result.Item));
    }
  }
  async search(params: {
    limit: number;
    filters: { key: string; value: string; operator: ComparisonOperator }[];
  }): Promise<Music.SongItem[]> {
    const ScanFilter = params.filters.reduce(
      (acc, next) => ({
        ...acc,
        [next.key]: {
          AttributeValueList: [
            {
              S: next.value,
            },
          ],
          ComparisonOperator: next.operator,
        },
      }),
      {} as ScanInput["ScanFilter"]
    );
    const searchResponse = await this.db.scan({
      TableName,
      Limit: params.limit,
      ScanFilter,
    });

    return (
      searchResponse.Items?.map((item) => dynamoDbItemToObject(item))
        .map((item) => Music.SongItem.create(item))
        .map((song) => ({
          ...song,
          img_url: `${this.opts.artistImagesBucketUrl}/${encodeURIComponent(
            song.artist
          )}`,
        })) || []
    );
  }
}

```

        
        


```web/lib/services/SubscriptionsService.ts
import { DynamoDB } from "@aws-sdk/client-dynamodb";
import { createStruct, Music, Subscriptions } from "lib/types";
import { SongService } from "./SongService";
import { UserService } from "./UserService";
import { dynamoDbItemToObject, structToDynamoDbItem } from "./utils";

const TableName = "user_subscriptions";

const getKey = (params: { email: string; songId: string }) =>
  `${params.email}---${params.songId}`;
export class SubscriptionService {
  constructor(
    private db: DynamoDB,
    private songService: SongService,
    private userService: UserService
  ) {}
  async subscriptionsForUser(
    email: string
  ): Promise<Subscriptions.SubscriptionsPageResponse> {
    const scanRequest = await this.db.scan({
      TableName,
      ScanFilter: {
        email: {
          AttributeValueList: [{ S: email }],
          ComparisonOperator: "EQ",
        },
      },
    });
    const items =
      scanRequest.Items?.map((item) =>
        Subscriptions.SubscriptionItem.create(dynamoDbItemToObject(item))
      ) || [];
    if (!items.length) return [];
    const subscriptionsBySongId = items.reduce(
      (acc, next) => ({
        ...acc,
        [next.songId]: next,
      }),
      {} as Record<string, Subscriptions.SubscriptionItem>
    );
    return (await this.songService.getSongs(items.map((item) => item.songId)))
      .map((song) => ({
        email,
        song,
        subscribedAt: subscriptionsBySongId[song.id].subscribedAt,
      }))
      .sort((a, z) => a.subscribedAt.valueOf() - z.subscribedAt.valueOf());
  }

  async subscribeUserToSong(params: {
    email: string;
    songId: string;
  }): Promise<Subscriptions.Subscription | "UserNotFound" | "SongNotFound"> {
    const emailSongId = getKey(params);
    const existing = await this.db.getItem({
      TableName,
      Key: {
        emailSongId: {
          S: emailSongId,
        },
      },
    });

    const song = await this.songService.getSong(params.songId);
    if (!song) {
      return "SongNotFound";
    }

    if (!existing.Item) {
      const user = await this.userService.getUser(params.email);
      if (!user) {
        return "UserNotFound";
      }
      const now = new Date();
      await this.db.putItem({
        TableName,
        Item: structToDynamoDbItem(
          createStruct(Subscriptions.SubscriptionItem, {
            ...params,
            emailSongId: emailSongId,
            subscribedAt: now,
          })
        ),
      });
      return {
        email: params.email,
        song,
        subscribedAt: now,
      };
    } else {
      return Subscriptions.Subscription.create(
        dynamoDbItemToObject(existing.Item)
      );
    }
  }

  async unsubscribeUserFromSong(params: { songId: string; email: string }) {
    await this.db.deleteItem({
      TableName,
      Key: {
        emailSongId: { S: getKey(params) },
      },
    });
  }
}

```

        
        


```web/lib/services/UserService.ts
import { DynamoDB } from "@aws-sdk/client-dynamodb";
import { encodePayload } from "lib/auth";
import { createStruct, email } from "lib/types";
import { coerce, object, string, intersection, refine } from "superstruct";
import { dynamoDbItemToObject, structToDynamoDbItem } from "./utils";

const TableName = "login";

const lowercasedString = coerce(string(), string(), (value) =>
  value.toLowerCase()
);
const User = object({
  email: intersection([lowercasedString, email]),
  user_name: string(),
  password: string(),
});
export type User = typeof User.TYPE;

export class UserService {
  constructor(private db: DynamoDB) {}
  async getUser(email: string): Promise<User | undefined> {
    const { Item } = await this.db.getItem({
      TableName,
      Key: { email: { S: email } },
    });

    if (!Item) {
      return undefined;
    }
    return User.create(dynamoDbItemToObject(Item));
  }
  async validateCredentials(params: { email: string; password: string }) {
    const user = await this.getUser(params.email);
    if (!user) {
      return false;
    }
    if (user.password !== params.password) {
      return false;
    }

    return encodePayload({
      email: user.email,
      name: user.user_name,
    });
  }

  async registerUser(params: {
    email: string;
    name: string;
    password: string;
  }) {
    const existing = await this.getUser(params.email);
    if (existing) {
      return "EmailExists";
    }

    await this.db.putItem({
      TableName,
      Item: structToDynamoDbItem(
        createStruct(User, {
          email: params.email,
          user_name: params.name,
          password: params.password,
        })
      ),
    });

    return {
      email: params.email,
      name: params.name,
    };
  }
}

```

        
        


```web/lib/services/root.ts
// IoC Root
import { DynamoDB } from "@aws-sdk/client-dynamodb";
import { S3 } from "@aws-sdk/client-s3";
import { SongService } from "./SongService";
import { SubscriptionService } from "./SubscriptionsService";
import { UserService } from "./UserService";
const region = "ap-southeast-2";

const db = new DynamoDB({ region });
const s3 = new S3({ region });
const artistImagesBucketName = "cloud-computing-assignment-2-artist-images";
const artistImagesBucketUrl = `https://${artistImagesBucketName}.s3-${region}.amazonaws.com`;
export const userService = new UserService(db);
export const songService = new SongService(db, { artistImagesBucketUrl });
export const subscriptionService = new SubscriptionService(
  db,
  songService,
  userService
);

```

        
        


```web/lib/services/utils.ts
import { AttributeValue } from "@aws-sdk/client-dynamodb";

export const dynamoDbItemToObject = (item: {
  [k: string]: AttributeValue;
}): Record<string, unknown> =>
  Object.entries(item).reduce(
    (acc, [key, value]) => ({
      ...acc,
      [key]: Object.values(value)[0],
    }),
    {}
  );

export const structToDynamoDbItem = <T extends object>(
  data: T
): Record<string, AttributeValue> =>
  Object.entries(data).reduce(
    (acc, [key, value]) => ({
      ...acc,
      [key]:
        typeof value === "number" || typeof value === "bigint"
          ? {
              N: value,
            }
          : typeof value === "boolean"
          ? {
              B: value,
            }
          : {
              S: value,
            },
    }),
    {}
  );

```

        
        


```web/lib/state/Songs.ts
import { APIError, Music } from "lib/types";
import { useQuery, UseQueryOptions, QueryFunctionContext } from "react-query";
import { array } from "superstruct";
const SongSearchResponse = array(Music.SongItem);
type QueryKey = [string, Music.SongSearchRequest];
type SongSearchResponse = typeof SongSearchResponse.TYPE;
const fetcher = (context: QueryFunctionContext<QueryKey>) =>
  fetch("/api/songSearch", {
    method: "POST",
    body: JSON.stringify(context.queryKey[1]),
    headers: {
      "Content-Type": "application/json",
    },
  }).then(async (r) => {
    if (r.ok) {
      return SongSearchResponse.create(await r.json());
    } else {
      throw APIError.create(await r.json());
    }
  });

export const songQueryKey = "song";
export const useSongSearchQuery = (
  params: Music.SongSearchRequest,
  options?: UseQueryOptions<
    typeof SongSearchResponse.TYPE,
    APIError,
    SongSearchResponse,
    QueryKey
  >
) => useQuery([songQueryKey, params], fetcher, { retry: false, ...options });

```

        
        


```web/lib/state/Subscriptions.ts
import { APIError, Music, Subscriptions } from "lib/types";
import {
  MutationFunction,
  useMutation,
  useQuery,
  UseQueryOptions,
} from "react-query";
import { queryClient } from "./queryClient";
import { songQueryKey } from "./Songs";
const querier = () => {
  const controller = new AbortController();
  const promise = fetch("/api/subscriptions", {
    method: "GET",
    headers: {
      "Content-Type": "application/json",
    },
    signal: controller.signal,
  }).then(async (r) => {
    if (r.ok) {
      return Subscriptions.SubscriptionsPageResponse.create(await r.json());
    } else {
      throw APIError.create(await r.json());
    }
  });
  return Object.assign(promise, { cancel: () => controller.abort() });
};
const subscriptionsQueryKey = "subscriptions";
export const useSubscriptionsQuery = (
  options?: UseQueryOptions<
    Subscriptions.SubscriptionsPageResponse,
    APIError,
    Subscriptions.SubscriptionsPageResponse,
    string
  >
) =>
  useQuery<
    Subscriptions.SubscriptionsPageResponse,
    APIError,
    Subscriptions.SubscriptionsPageResponse,
    string
  >(subscriptionsQueryKey, querier, options);

const subscribeToSongMutator: MutationFunction<
  Subscriptions.Subscription,
  { songId: string; email: string }
> = ({ songId }) =>
  fetch("/api/subscribe", {
    method: "POST",
    body: JSON.stringify({ songId }),
    headers: {
      "Content-Type": "application/json",
    },
  }).then(async (r) => {
    if (r.ok) {
      return Subscriptions.Subscription.create(await r.json());
    } else {
      throw APIError.create(await r.json());
    }
  });
export const useSubscribeToSongMutation = () =>
  useMutation("subscribeToSong", subscribeToSongMutator, {
    onMutate: async ({ songId, email }) => {
      await queryClient.cancelQueries(subscriptionsQueryKey);
      const song = queryClient
        .getQueryData<Music.SongItem[]>(songQueryKey, { exact: false })
        ?.find((item) => item.id === songId);
      if (song) {
        queryClient.setQueryData(
          subscriptionsQueryKey,
          (data?: Subscriptions.SubscriptionsPageResponse) => [
            ...(data || []),
            {
              email,
              song,
              subscribedAt: new Date(),
            },
          ]
        );
      }
    },
    onSettled: async () => {
      await queryClient.invalidateQueries(subscriptionsQueryKey);
    },
  });

const unsubscribeMutator: MutationFunction<void, { songId: string }> = ({
  songId,
}) =>
  fetch("/api/unsubscribe", {
    method: "POST",
    body: JSON.stringify({ songId }),
    headers: {
      "Content-Type": "application/json",
    },
  }).then(async (r) => {
    if (r.ok) {
      return;
    } else {
      throw APIError.create(await r.json());
    }
  });

const unsubscribeMutationKey = "unsubscribeToSong";
export const useUnsubscribeToSongMutation = () =>
  useMutation(unsubscribeMutationKey, unsubscribeMutator, {
    onMutate: async ({ songId }) => {
      await queryClient.cancelQueries(subscriptionsQueryKey);
      queryClient.setQueryData(
        subscriptionsQueryKey,
        (data?: Subscriptions.SubscriptionsPageResponse) =>
          data?.filter((item) => item.song.id !== songId) || []
      );
    },
    onSettled: async () => {
      await queryClient.invalidateQueries(subscriptionsQueryKey);
    },
  });

```

        
        


```web/lib/state/User.ts
import { createState, useState } from "@hookstate/core";
import {
  APIError,
  AuthTokenPayload,
  authTokenPayload,
  Login,
  RegisterPage,
} from "web/lib/types";
import { useRouter } from "next/router";
import React from "react";
import { useMutation } from "react-query";
import { Persistence } from "@hookstate/persistence";
import { queryClient } from "./queryClient";
export type UserState = {
  hydrated: boolean;
  user: AuthTokenPayload | null;
};

export const userState = createState<UserState>({
  hydrated: false,
  user: null,
});

export const hydrateCurrentUser = () => {
  if (!userState.value.hydrated) {
    if (typeof window !== "undefined")
      userState.attach(Persistence("user-state"));
    userState.hydrated.set(true);

    if (userState.value.user) {
      // Re-fetch me to check if the user is still valid
      fetch("/api/me")
        .then(async (res) => {
          const response = authTokenPayload.create(await res.json());
          userState.user.set(response);
        })
        .catch(() => {
          userState.user.set(null);
        });
    }
  }
};

if (typeof window !== "undefined") hydrateCurrentUser();

export const useUser = (redirectIfUnauthenticated: boolean = true) => {
  const state = useState(userState);
  const router = useRouter();

  React.useEffect(() => {
    if (
      !state.value.user &&
      state.value.hydrated &&
      redirectIfUnauthenticated
    ) {
      router.push("/login");
    }
  });
  return {
    state: state,
    logout: React.useCallback(() => {
      state.user.set(null);
      router.push("/login");
      // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []),
  };
};

export const useLoginMutation = () =>
  useMutation<
    typeof Login.LoginSuccess.TYPE,
    typeof APIError["TYPE"] | string,
    typeof Login.LoginRequest.TYPE
  >(
    "login",
    (params) =>
      fetch("/api/login", {
        method: "POST",
        body: JSON.stringify(params),
        headers: {
          "Content-Type": "application/json",
        },
      }).then(async (r) => {
        if (r.ok) {
          return Login.LoginSuccess.create(await r.json());
        } else {
          throw APIError.create(await r.json());
        }
      }),
    {
      onMutate: () => {
        queryClient.clear();
      },
    }
  );
export const useRegisterMutation = () =>
  useMutation<
    typeof RegisterPage.RegistrationSucessResponse.TYPE,
    typeof APIError["TYPE"] | string,
    typeof RegisterPage.RegistrationRequest.TYPE
  >("login", (params) =>
    fetch("/api/register", {
      method: "POST",
      body: JSON.stringify(params),
      headers: {
        "Content-Type": "application/json",
      },
    }).then(async (r) => {
      if (r.ok) {
        return RegisterPage.RegistrationSucessResponse.create(await r.json());
      } else {
        throw APIError.create(await r.json());
      }
    })
  );

```

        
        


```web/lib/state/queryClient.ts
import { QueryClient } from "react-query";

export const queryClient = new QueryClient();

```

        
        


```web/pages/api/login.ts
import { StatusCodes } from "http-status-codes";
import { BaseApiError } from "lib/api/errors";
import { setCookies } from "lib/cookies";
import { authCookieKey } from "lib/auth";
import { createStruct, Login } from "web/lib/types";
import type { NextApiRequest, NextApiResponse } from "next";
import { userService } from "lib/services/root";

class InvalidCredentialsError extends BaseApiError {
  message = "Email or password is incorrect";
  statusCode = StatusCodes.BAD_REQUEST;
}

export default async (req: NextApiRequest, res: NextApiResponse) => {
  const body = Login.LoginRequest.create(req.body);
  const credentialsValidationResult = await userService.validateCredentials(
    body
  );
  if (!credentialsValidationResult) {
    new InvalidCredentialsError().send(res);
  } else {
    const { token, exp, payload } = credentialsValidationResult;
    setCookies(res, [{ name: authCookieKey, value: token }]);
    res.send(createStruct(Login.LoginSuccess, payload));
  }
};

```

        
        


```web/pages/api/me.ts
import { authCookieKey, verifyAndDecodeToken } from "web/lib/auth";
import { NextApiRequest, NextApiResponse } from "next";

export default (req: NextApiRequest, res: NextApiResponse) => {
  const user = verifyAndDecodeToken(req.cookies[authCookieKey]);
  res.send(user);
};

```

        
        


```web/pages/api/register.ts
import { StatusCodes } from "http-status-codes";
import { BaseApiError } from "lib/api/errors";
import { userService } from "lib/services/root";

import { createStruct, RegisterPage } from "lib/types";
import { NextApiRequest, NextApiResponse } from "next";

export class EmailAlreadyExists extends BaseApiError<string> {
  message = "The email already exists";
  statusCode = StatusCodes.BAD_REQUEST;
}

export default async function (req: NextApiRequest, res: NextApiResponse) {
  const body = RegisterPage.RegistrationRequest.create(req.body);
  const result = await userService.registerUser(body);
  if (result === "EmailExists") {
    return new EmailAlreadyExists().send(res);
  } else {
    res.send(createStruct(RegisterPage.RegistrationSucessResponse, result));
  }
}

```

        
        


```web/pages/api/songSearch.ts
import { authenticated } from "lib/api/middlewares";
import { songService } from "lib/services/root";
import { Music } from "lib/types";
import { filterNotNull } from "lib/utils";

export default authenticated(async (req, res) => {
  const body = Music.SongSearchRequest.create(req.body);
  const filters = ([
    body.artist && body.artist.length
      ? { key: "artist", value: body.artist, operator: "CONTAINS" }
      : null,
    body.title && body.title.length
      ? { key: "title", value: body.title, operator: "CONTAINS" }
      : null,
    body.year && body.year.length
      ? { key: "year", value: body.year, operator: "CONTAINS" }
      : null,
  ] as Parameters<typeof songService.search>[0]["filters"]).filter(
    filterNotNull
  );

  const result = await songService.search({
    filters,
    limit: body.limit,
  });
  res.send(result);
});

```

        
        


```web/pages/api/subscribe.ts
import { StatusCodes } from "http-status-codes";
import { BaseApiError } from "lib/api/errors";
import { authenticated } from "lib/api/middlewares";
import { subscriptionService } from "lib/services/root";
import { Subscriptions } from "lib/types";
import { object, string } from "superstruct";
const PostSubscriptionRequest = object({
  songId: string(),
});
class InvalidSubscription extends BaseApiError {
  message = "Invalid subscription request";
  statusCode = StatusCodes.BAD_REQUEST;
}
type PostSubscriptionRequest = typeof PostSubscriptionRequest.TYPE;

export default authenticated(async (req, res) => {
  const body = PostSubscriptionRequest.create(req.body);
  const response = await subscriptionService.subscribeUserToSong({
    email: req.user.email,
    songId: body.songId,
  });

  if (Subscriptions.Subscription.is(response)) {
    res.send(response);
  } else {
    new InvalidSubscription().send(res);
  }
});

```

        
        


```web/pages/api/subscriptions.ts
import { authenticated } from "lib/api/middlewares";
import { subscriptionService } from "lib/services/root";

export default authenticated(async (req, res) => {
  res.send(await subscriptionService.subscriptionsForUser(req.user.email));
});

```

        
        


```web/pages/api/unsubscribe.ts
import { StatusCodes } from "http-status-codes";
import { authenticated } from "lib/api/middlewares";
import { subscriptionService } from "lib/services/root";
import { object, string } from "superstruct";
const DeleteSubscriptionRequest = object({
  songId: string(),
});

export default authenticated(async (req, res) => {
  const body = DeleteSubscriptionRequest.create(req.body);
  await subscriptionService.unsubscribeUserFromSong({
    email: req.user.email,
    songId: body.songId,
  });
  res.send(undefined);
});

```

        



# Task 2

# Assignment 3 Proposal

The idea for this project is to extend the application build in assignment 2 into a music streaming service. There isn't much room, nor desire, for true innovation in this space. Because of this, it will be very similar to other applications, which may be unoriginal but also helps with the design of the application; less time will be focussed on the features and more will be focussed on cloud architecture.

## Feature outline

1. Login and registration to supoport authentication
2. Role based access control for authorization (admins and plain old users)
3. Music search page that federates multiple external music APIs
   1. Use **Spotify** as an external API to populate search results
   2. Also use **ytdl** (Youtube search API)
   3. Could also integrate **Soundcloud** API
   4. Be able to like music
   5. Potentially add to a playlist
4. Personal music importer
   1. Upload your own music to our servers, along with song artwork and metadata
   2. It will be processed asynchronously as a long running task (this is where **AWS SQS** and **Lambda** come in)
   3. **Amazon Elastic Transcoder** is a service we could potentially use to assist with this process of ensuring content is in the formats required for playback on other devices.
5. Library page
   1. View the music you've uploaded and liked
6. Player component
   1. Throughout the wole site, a persistent music player will be visible to control the currently playing song.
7. Jukebox/radio mode
   1. Enter a shared room of a currently playing song, a queue, and be able to control them both and expect it to be synced with everyone else in the room.

## System architecture

We'll deploy the backend as an **ECS service** (a cluster, service, and set of tasks), the frontend as a **CloudFront + S3 web** application. **API Gateway** could also be used as the point of entry to the backend if needed.
**AWS AppSync** could be a good service to easily solve #7: real time collaboration. It may easily facilitate the jukebox functionality.
For personal music importing, we can use ephemeral Lambdas to scale this processing; the backend service that receives the request to upload a song could hand the processing off to a Lambda function, and the same backend service in the same request could listen for changes to the database (by receiving a completion event from SQS or CloudWatch), and send a completion response to the user.
To coordinate all of this, including automated deployments, **AWS CloudFormation** and the **CDK** can be utilised, so that we can describe our whole infrastructure using TypeScript.

        

                  